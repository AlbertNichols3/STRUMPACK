Build Instructions
==================

See doc/manual.pdf for more detailed instructions.
Or see example_build.sh for examples on how to call CMake.

STRUMPACK uses the CMake build system. To build use the
following steps:

> tar -xvzf strumpack-x.y.z.tar.gz
> cd strumpack-x.y.z
> mkdir build
> cd build
> #see below or in the manual for extra options for CMake
> export METISDIR=/path/to/metis
> export PARMETISDIR=/path/to/parmetis
> export SCOTCHDIR=/path/to/scotch
> cmake ../ -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/path/to/install \
    -DCMAKE_CXX_COMPILER=<C++ (MPI) compiler> \        # optional, should be detected
    -DCMAKE_C_COMPILER=<C (MPI) compiler> \
    -DCMAKE_Fortran_COMPILER=<Fortran77 (MPI) compiler> \
    -DSCALAPACK_LIBRARIES="/path/to/scalapack/libscalapack.a;/path/to/blacs/libblacs.a" \
    -DMETIS_INCLUDES=/path/to/metis/incluce \
    -DMETIS_LIBRARIES=/path/to/metis/libmetis.a \
    -DPARMETIS_INCLUDES=/path/to/parmetis/include \
    -DPARMETIS_LIBRARIES=/path/to/parmetis/libparmetis.a \
    -DSCOTCH_INCLUDES=/path/to/scotch/include \
    -DSCOTCH_LIBRARIES="/path/to/ptscotch/libscotch.a;...libscotcherr.a;...libptscotch.a;...libptscotcherr.a"
> make
> make install
> make test     # optional


This will build STRUMPACK in a folder separate from the source
directory, which is the recommended way of building. This also
generates an example Makefile in the folder build/examples.

There are a number of dependencies which must be met in order for the
build to succeed. These are:
- C++11, C and Fortran77 compilers.
- An MPI library.
- OpenMP >= 3.1 support in the C++ compiler.
- BLAS, LAPACK, ScaLAPACK, BLACS. (BLACS usually comes with ScaLAPACK).
- Metis and ParMetis.
- Scotch and PT-Scotch.
- getopt_long.


The (C++/C/Fortran) compiler can be specified as follows:
> cmake ../ -DCMAKE_BUILD_TYPE=Release
    -DCMAKE_CXX_COMPILER=mpic++ -DCMAKE_C_COMPILER=mpicc
    -DCMAKE_Fortran_COMPILER=mpif90


CMake will try to find BLAS/LAPACK/ScaLAPACK libraries
automatically. CMake will look in the standard locations and in
$SCALAPACKDIR and $BLACSDIR. You can set these on the command line via
(in bash):

> export SCALAPACKDIR=/path/to/scalapack/
> export BLACSDIR=/path/to/blacs

If BLACS/SCALAPACK are not installed in a standard location, you
can also specify the libraries for instance using
-DSCALAPACK_LIBRARIES=".." or directly via the linker flags as
follows:
> cmake ../ -DCMAKE_BUILD_TYPE=Release
     -DCMAKE_EXE_LINKER_FLAGS="-L/usr/lib64/mpich/lib/ -lscalapack -lmpiblacs"


In order to get good performance, one should install an optimized or
vendor supplied BLAS implementation. Examples are Intel MKL, Cray
LibSci, AMD ACML, OpenBLAS or ATLAS.

For (Par)Metis and PT-Scotch, the following environment variables can
be set:
> export METISDIR=/path/to/metis
> export PARMETISDIR=/path/to/parmetis
> export SCOTCHDIR=/path/to/scotch

CMake will then look in $METISDIR/include for metis.h, in
$PARMETISDIR/include for parmetis.h and in $SCOTCHDIR/include for
scotch.h and ptscotch.h. Likewise, it will look in $METISDIR/lib,
$PARMETISDIR/lib and $SCOTCHDIR/lib for libmetis, libparmetis,
libscotch, libscotcherr, libptscotch, libptscotcherr.

Alternatively, one can specify the paths directly when calling CMake
as follows:
> cmake ../ -DCMAKE_BUILD_TYPE=Release
    -DMETIS_INCLUDES=/usr/local/metis/include \
    -DMETIS_LIBRARIES=/usr/local/metis/lib/libmetis.a

Similarly, one can set -DPARMETIS_INCLUDES, -DPARMETIS_LIBRARIES,
-DSCOTCH_INCLUDES and -DSCOTCH_LIBRARIES.



Usage Instructions
==================

Please see the examples in the examples/ folder, which also contains a
simple Makefile (generated by cmake, see above). For more info, read
the manual.
