Build Instructions
==================

See the online documentation for more detailed instructions:
http://portal.nersc.gov/project/sparse/strumpack/master/index.html
http://portal.nersc.gov/project/sparse/strumpack/v3.3.0/index.html

Or see example_build.sh for examples on how to call CMake.

STRUMPACK uses the CMake build system. To build use the
following steps:

> tar -xvzf strumpack-x.y.z.tar.gz
> cd strumpack-x.y.z
> mkdir build
> cd build
> #see below or in the manual for extra options for CMake
> export METISDIR=/path/to/metis
> cmake ../ -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/path/to/install \
    -DCMAKE_CXX_COMPILER=<C++ (MPI) compiler> \        # optional, should be detected
    -DCMAKE_C_COMPILER=<C (MPI) compiler> \
    -DCMAKE_Fortran_COMPILER=<Fortran77 (MPI) compiler> \
    -DTPL_SCALAPACK_LIBRARIES="/path/to/scalapack/libscalapack.a;/path/to/blacs/libblacs.a" \
    -DTPL_METIS_INCLUDE_DIRS=/path/to/metis/include \
    -DTPL_METIS_LIBRARIES=/path/to/metis/libmetis.a
> make
> make install
> make test     # optional


This will build STRUMPACK in a folder separate from the source
directory, which is the recommended way of building. This also
generates an example Makefile in the folder build/examples (this
example makefile is not generated by CMake, it might need some manual
tuning).

There are a number of dependencies which must be met in order for the
build to succeed. These are:
- C++11, C and Fortran77 compilers.
- An MPI library.
- BLAS, LAPACK, ScaLAPACK, BLACS. (BLACS usually comes with ScaLAPACK).
- Metis.
- getopt_long.

Optional dependencies:
- OpenMP >= 4.5 support in the C++ compiler.
  Disable by adding -DSTRUMPACK_USE_OPENMP=OFF
- ParMetis.
- Scotch and PT-Scotch.

The (C++/C/Fortran) compiler can be specified as follows:
> cmake ../ -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_CXX_COMPILER=mpic++ \
    -DCMAKE_C_COMPILER=mpicc \
    -DCMAKE_Fortran_COMPILER=mpif90


BLAS/LAPACK/ScaLAPACK
=====================
CMake will try to find BLAS/LAPACK/ScaLAPACK libraries
automatically. CMake will look in the standard locations and in
$SCALAPACKDIR and $BLACSDIR. You can set these on the command line via
(in bash):

> export SCALAPACKDIR=/path/to/scalapack/
> export BLACSDIR=/path/to/blacs

If BLACS/SCALAPACK are not installed in a standard location, you can
also specify the libraries directly via -DTPL_BLAS_LIBRARIES=".."
-DTPL_LAPACK_LIBRARIES=".." -DTPL_SCALAPACK_LIBRARIES=".." or directly via the
linker flags as follows:
> cmake ../ -DCMAKE_BUILD_TYPE=Release \
   -DCMAKE_EXE_LINKER_FLAGS="-L/usr/lib64/mpich/lib/ -lscalapack -lmpiblacs"

In order to get good performance, one should install an optimized or
vendor supplied BLAS implementation. Examples are Intel MKL, Cray
LibSci, AMD ACML, OpenBLAS or ATLAS.

On Cary systems, the compiler wrappers usually take care of linking
BLAS/LAPACK and ScaLAPACK. In that case, just set
-DTPL_BLAS_LIBRARIES="" \
-DTPL_LAPACK_LIBRARIES="" \
-DTPL_SCALAPACK_LIBRARIES="" \
in order to avoid CMake from looking for the libraries.

When using Intel MKL we recommend using the the link advisor:
https://software.intel.com/en-us/articles/intel-mkl-link-line-advisor
Always ask for the 32-bit integer interface layer, check ScaLAPACK and
BLACS.

For instance when the Intel MKL link line advisor returns the
following:

${MKLROOT}/lib/intel64/libmkl_scalapack_lp64.a -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_lp64.a ${MKLROOT}/lib/intel64/libmkl_gnu_thread.a ${MKLROOT}/lib/intel64/libmkl_core.a ${MKLROOT}/lib/intel64/libmkl_blacs_intelmpi_lp64.a -Wl,--end-group -lgomp -lpthread -lm -ldl

Set this:

-DTPL_BLAS_LIBRARIES="" \
-DTPL_LAPACK_LIBRARIES="" \
-DTPL_SCALAPACK_LIBRARIES="${MKLROOT}/lib/intel64/libmkl_scalapack_lp64.a;-Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_lp64.a ${MKLROOT}/lib/intel64/libmkl_gnu_thread.a ${MKLROOT}/lib/intel64/libmkl_core.a ${MKLROOT}/lib/intel64/libmkl_blacs_intelmpi_lp64.a -Wl,--end-group;-lgomp;-lpthread;-lm;-ldl"

i.e., separate the arguments with a ';', where everything between
-Wl,--start-group and -Wl,--end-group is a single argument.


METIS
=====
For Metis, the following environment variable can be set:
> export METISDIR=/path/to/metis
CMake will then look in $METISDIR/include for metis.h. Likewise, it
will look in $METISDIR/lib for libmetis. Alternatively, one can
specify the paths directly when calling CMake as follows:
> cmake ../ -DCMAKE_BUILD_TYPE=Release \
    -DTPL_METIS_INCLUDE_DIRS=/usr/local/metis/include \
    -DTPL_METIS_LIBRARIES=/usr/local/metis/lib/libmetis.a


cuBLAS and cuSOLVER (optional)
==============================
Can be used to accelerate the sparse direct solver.

> cmake ../  \
     -DTPL_ENABLE_CUBLAS=ON \
     -DTPL_CUBLAS_LIBRARIES="${CUDA_DIR}/lib64/libcudart.so;${CUDA_DIR}/lib64/libcublas.so;${CUDA_DIR}/lib64/libcusolver.so" \
     -DTPL_CUBLAS_INCLUDE_DIRS="${CUDA_DIR}/include"

At the moment, the rank structured preconditioners do not work when
cuda acceleration is enabled.


ParMETIS and (PT)Scotch (optional)
==================================
ParMETIS and (PT)Scotch are optional dependencies.  ParMETIS can be
enable by adding the following option to the CMake command:
    -DTPL_ENABLE_PARMETIS=ON
And similarly for (PT-)Scotch:
    -DTPL_ENABLE_SCOTCH=ON

For ParMETIS and PT-Scotch, the following environment variables can be
set:
> export PARMETISDIR=/path/to/parmetis
> export SCOTCHDIR=/path/to/scotch

CMake will then look in $PARMETISDIR/include for parmetis.h and in
$SCOTCHDIR/include for scotch.h and ptscotch.h. Likewise, it will look
in $PARMETISDIR/lib and $SCOTCHDIR/lib for libparmetis, libscotch,
libscotcherr, libptscotch, libptscotcherr.

Or, one can set -DTPL_PARMETIS_INCLUDE_DIRS, -DTPL_PARMETIS_LIBRARIES,
-DTPL_SCOTCH_INCLUDE_DIRS and -DTPL_SCOTCH_LIBRARIES":

    -DTPL_PARMETIS_INCLUDE_DIRS=/path/to/parmetis/include \
    -DTPL_PARMETIS_LIBRARIES=/path/to/parmetis/libparmetis.a

    -DTPL_SCOTCH_INCLUDE_DIRS=/path/to/scotch/include \
    -DTPL_SCOTCH_LIBRARIES="/path/to/ptscotch/libscotch.a;...libscotcherr.a;...libptscotch.a;...libptscotcherr.a"


CombBLAS (optional)
===================
Combinatioral BLAS can be used as an alternative for MC64, in order to
permute the matrix to get nonzeros on the diagonal.

https://people.eecs.berkeley.edu/~aydin/CombBLAS/html/

Enable this feature by adding -DTPL_ENABLE_COMBBLAS to the CMake
command. Then specify -DTPL_COMBBLAS_INCLUDE_DIRS=".." and
-DTPL_COMBBLAS_LIBRARIES="..".


ButterflyPACK (optional, needs >= 1.1.0)
========================================
See: https://github.com/liuyangzhuan/ButterflyPACK

ButterflyPACK provides support for Hierarchically Off-Diagonal
Low-Rank and Butterfly matrix compression. ButterflyPACK is written in
Fortran. STRUMPACK provides C++ interfaces to the functionality of
ButterflyPACK and STRUMPACK uses ButterflyPACK in the sparse
preconditioner.

Enable support for ButterflyPACK using:
    -DTPL_ENABLE_BPACK=ON

And then set
> export BPACKHOME=/path/to/butterflypack
and add the following to the CMake invocation:
    -DTPL_BPACK_INCLUDE_DIRS="$BPACKHOME/SRC_DOUBLE/;$BPACKHOME/SRC_DOUBLECOMPLEX" \
    -DTPL_BPACK_LIBRARIES="$BPACKHOME/build/SRC_DOUBLE/libdbutterflypack.a;$BPACKHOME/build/SRC_DOUBLECOMPLEX/libzbutterflypack.a"


Usage Instructions
==================
Please see the examples in the examples/ folder, which also contains a
simple Makefile (generated by cmake, see above). For more info, read
the manual.


How to generate the doxygen documentation
=========================================

After running CMake, just type
> make doc

This requires the doxygen executable is available on you machine.
The documentation will be generated in you build folder in the doc subdir.
