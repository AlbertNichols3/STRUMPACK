This folder contains a number of examples showing how to use
STRUMPACK-sparse. A simple Makefile is included, which is generated
during the CMake configuration phase. This auto generated Makefile
might need to be manually modified slightly on Mac OS systems.

When running, also make sure to set the number of OpenMP threads
correctly! For instance on bash, to run with 4 MPI processes and 6
threads per MPI process:
      export OMP_NUM_THREADS=6
      mpirun -n 4 ./exe args

Check the documentation of your MPI environment for the correct
arguments to mpirun (or the alternative command). For instance on
NERSC Cray machines, the aprun command is used instead and the number
of threads needs to be specified to the aprun command as well being
set via the OMP_NUM_THREADS variable. Also experiment with OpenMP
thread affinity and thread pinning to get good and consistent
performance.


The examples (for now) include:
===============================

- KernelRegression: an example on how to use HSS for kernel matrices
    as used in certain machine learning applications. This requires 4
    input files, the training and testing data (of dimension d), and
    the corresponding labels. See the data/susy_10Kn* files for an
    example.

    OMP_NUM_THREADS=4 ./KernelRegression data/susy_10Kn 8 1.3 3.11 Gauss test --hss_rel_tol 1e-2

- KernelRegressionMPI: an MPI version of KernelRegression. This also
  runs HODLR compression of the kernel matrix, if STRUMPACK was
  configured with HODLR support:

    OMP_NUM_THREADS=1 mpirun -n 4 ./KernelRegressionMPI data/susy_10Kn 8 1.3 3.11 Gauss test --hss_rel_tol 1e-2


- testPoisson2d: A double precision C++ example, solving the 2D
    Poisson problem with the sequential or multithreaded solver.  Run
    as follows, for a 1000x1000 Poisson problem with Dirichlet BCs:

      ./testPoisson2d 1000

- testPoisson2d: A double precision C++ example, solving the 3D
    Poisson problem with the sequential or multithreaded solver.  Run
    as follows, for a 100x100x100 Poisson problem with Dirichlet BCs:

      ./testPoisson3d 100

- testPoisson2dMPI: A double precision C++ example, solving the 2D
    Poisson problem with the MPI solver with the input matrix,
    right-hand side and solution vector replicated over all MPI
    processes. Run as follows, for a 1000x1000 Poisson problem with
    Dirichlet BCs:

      mpirun -n 4 ./testPoisson2dMPI 1000

- testPoisson2dMPIDist: A double precision C++ example, solving the 2D
    Poisson problem with the fully distributed MPI solver.  Run as
    follows, for a 1000x1000 Poisson problem with Dirichlet BCs:

      mpirun -n 4 ./testPoisson2dMPIDist 1000

- testMMdouble: A double precision C++ example, solving a linear
    system with a matrix given in a file in the matrix-market format,
    using the sequential or multithreaded solver. Run as follows with
    a matrix specified in the file data/pde900.mtx (provided):

      ./testMMdouble data/pde900.mtx

- testMMdoubleMPI: A double precision C++ example, solving a linear
    system with a matrix given in a file in the matrix-market format,
    using the MPI solver with the input matrix, right-hand side and
    solution vector replicated over all MPI processes.  Run as follows
    with a matrix specified in the file pde900.mtx:

      mpirun -n 4 ./testMMdoubleMPI data/pde900.mtx

- testMMdoubleMPIDist: A double precision C++ example, solving a
    linear system with a matrix given in a file in the matrix-market
    format, using the fully distributed MPI solver. Run as follows
    with a matrix specified in the file pde900.mtx:

      mpirun -n 4 ./testMMdoubleMPIDist m data/pde900.mtx
      mpirun -n 4 ./testMMdoubleMPIDist b data/pde900.bin # see mtx2bin

- testMMdouble64: A double precision C++ example using 64 bit integers
    for the sparse matrix, solving a linear system with a matrix given
    in a file in the matrix-market format, using the sequential or
    multithreaded solver. Run as follows with
    a matrix specified in the file pde900.mtx (provided):

      ./testMMdouble64 data/pde900.mtx

- testMMdoubleMPIDist64: A double precision C++ example using 64 bit
    integers for the sparse matrix, solving a linear system with a
    matrix given in a file in the matrix-market format, using the
    fully distributed MPI solver. Run as follows with a matrix
    specified in the file pde900.mtx:

      mpirun -n 4 ./testMMdoubleMPIDist64 data/pde900.mtx


- mtx2bin: Read a matrix in matrix market format, and print it out
   again in binary format. Run as

      ./mtx2bin data/pde900.mtx pde900.bin

   Run as ./mtx2bin (without arguments) to see a description of the
   binary output format.

- bin2mtx: opposite of mtx2bin


- sexample:
- dexample:
- cexample:
- zexample:
    These for examples use the C interface for real single precision
    (sexample), real double precision (dexample), complex single
    precision (cexample) and complex double precision (zexample). They
    all solve the same problem as the testPoisson2d C++ example, also
    with the sequential/multithreaded interface.

      ./sexample 1000
