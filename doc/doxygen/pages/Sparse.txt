/*! \page using Using STRUMPACK Sparse

This section gives an overview on the basic usage of the sparse solvers in STRUMPACK. Many STRUMPACK options can be set from the command line. Running with \--<b>help</b> or -h, will give you a list of supported run- time options. \n
&nbsp;&nbsp;&nbsp;&nbsp;An example Makefile is available in the examples/ directory. This Makefile is generated by the <b>cmake</b> command, see Section 2. \n
&nbsp;&nbsp;&nbsp;&nbsp;The STRUMPACK package is written in C++, and offers a simple C++ interface. See Section 8 if you prefer a C interface. STRUMPACK-sparse has three different solver classes, all interaction happens through objects of these classes: 

- <b>StrumpackSparseSolver<scalar,integer=int></b> \n
This class represents the sparse solver for a single computational node, optionally using OpenMP parallelism. Use this if you are running the code sequentially, on a (multicore) laptop or desktop or on a single node of a larger cluster. This class is defined in StrumpackSparseSolver.hpp, so include this header if you intend to use it.
- <b>StrumpackSparseSolverMPI<scalar,integer=int></b> \n
This solver has (mostly) the same interface as StrumpackSparseSolver<scalar,integer> but the numerical factorization and multifrontal solve phases run in parallel using MPI and ScaLAPACK. However, the inputs (sparse matrix, right-hand side vector) need to be available completely on every MPI process. The reordering phase uses Metis or Scotch (not ParMetis or PTScotch) and the symbolic factorization is threaded, but not distributed. The (multifrontal) solve is done in parallel, but the right-hand side vectors need to be available completely on every processor. Make sure to call MPI_Init[_thread] before instantiating an object of this class and include the header file StrumpackSparseSolverMPI.hpp. We do not recommend this solver, instead, use StrumpackSparseSolverMPIDist whenever possible.
- <b> StrumpackSparseSolverMPIDist<scalar,integer=int></b> \n
This solver is fully distributed. The numerical factorization and solve as well as the symbolic factor- ization are distributed. The input is now a block-row distributed sparse matrix and a correspondingly distributed right-hand side. For matrix reordering, ParMetis or PT-Scotch are used. Include the header file StrumpackSparseSolverMPIDist.hpp and call MPI_Init[_thread].

&nbsp;&nbsp;&nbsp;&nbsp;The three solver classes StrumpackSparseSolver, StrumpackSparseSolverMPI and StrumpackSparseSolverMPIDist depend on two template parameters <scalar,integer>: the type of a scalar and an integer type. The scalar type can be float, double, std::complex<float> or std::complex<double>. It is recommended to first try to simply use the default integer=int type, unless you run into 32 bit integer overflow problems. In that case one can switch to for instance int64_t (a signed integer type).

<hr>

- \subpage StrumpackSparseSolver_Example 
- \subpage StrumpackSparseSolverMPI_Example
- \subpage StrumpackSparseSolverMPIDist_Example
- \subpage Initializing_the_Solver_Object
- \subpage Sparse_Matrix_Format
- \subpage Setting_and_Parsing_Options
- \subpage Reordering
- \subpage Factorization
- \subpage Solve
- \subpage All_Options_for_the_Sparse_Solver

*/

/*! \page StrumpackSparseSolver_Example StrumpackSparseSolver Example

The following shows the typical way to use a (sequential or multithreaded) STRUMPACK sparse solver: 

<img src="/Users/lucyguo/Desktop/LBL1/STRUMPACK/doc/doxygen/images/SSSEx.png" width = 100%>

Figure 1: Illustration of a small 5 × 5 sparse matrix with 11 nonzeros and its Compressed Sparse Row (CSR) or Yale format representation. We always use 0-based indexing! Let N = 5 denote the number of rows. The row_ptr array has N +1 elements, with element i denoting the start of row i in the col_ind and values arrays. Element row_ptr[N] = nnz, i.e., the total number of nonzero elements in the matrix. The values array holds the actual matrix values, ordered by row. The corresponding elements in col_ind give the column indices for each nonzero. There can be explicit zero elements in the matrix. The nonzero values and corresponding column indices need not be sorted by column (within a row).

> #include "StrumpackSparseSolver.hpp" \n
> using namespace strumpack; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// all strumpack code is in the strumpack namespace, \n\n
> 
> int main(int argc, char* argv[]) { \n
> int N = ...; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// construct an NxN CSR matrix with nnz nonzeros \n
> int* row_ptr = ...; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // N+1 integers \n
> int* col_ind = ...; nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // nnz integers \n
> double* val = ...; nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // nnz scalars \n
> double* x = new double[N]; nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // will hold the solution vector \n
> double* b = ...; nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // set a right-hand side b \n
> \n
> StrumpackSparseSolver<double> sp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // create solver object \n
> sp.options().set_rel_tol(1e-10); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // set options \n
> sp.options().set_gmres_restart(10); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // ... \n
> sp.options().enable_HSS();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp; // enable HSS compression, see section 5 \n
> sp.options().set_from_command_line(argc, argv); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp; // parse command line options \n
> sp.set_csr_matrix(N, row_ptr, col_ind, val); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;// set the matrix (copy) \n
> sp.reorder(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;// reorder matrix \n
> sp.factor(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;// numerical factorization \n
> sp.solve(b, x); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // solve Ax=b \n
> ... // check residual/error and cleanup \n
> }

The main steps are: create solver object, set options (parse options from the command line), set matrix, reorder, factor and finally solve. The matrix should be in the Compressed Sparse Row (CSR) format, also called Yale format, with 0 based indices. Figure 1 illustrates the CSR format. In the basic scenario, it is not necessary to explicitly call reorder and factor, since trying to solve with a StrumpackSparseSolver object that is not factored yet, will internally call the factor routine, which will call reorder if necessary.
\n
&nbsp;&nbsp;&nbsp;&nbsp;The above code should be linked with -lstrumpack and with the Metis, ParMetis, Scotch, PT-Scotch, BLAS, LAPACK, and ScaLAPACK libraries.

*/

/*! \page StrumpackSparseSolverMPI_Example StrumpackSparseSolverMPI Example

Usage of the StrumpackSparseSolverMPI<scalar,integer=int> solver is very similar: \n


> #include "StrumpackSparseSolverMPI.hpp" \n
> using namespace strumpack; \n
>  \n
> int main(int argc, char* argv[ ])&nbsp;&nbsp; { \n
> &nbsp;&nbsp;&nbsp;&nbsp; int thread_level, rank; \n
> &nbsp;&nbsp;&nbsp;&nbsp; // StrumpackSparseSolverMPI uses OpenMP so we should ask for MPI_THREAD_FUNNELED at least \n
> &nbsp;&nbsp;&nbsp;&nbsp; MPI_Init_thread(&argc, &argv, MPI_THREAD_FUNNELED, &thread_level);  \n
> &nbsp;&nbsp;&nbsp;&nbsp; MPI_Comm_rank(MPI_COMM_WORLD, &rank); \n
> &nbsp;&nbsp;&nbsp;&nbsp; if (thread_level != MPI_THREAD_FUNNELED && rank == 0) \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::cout << "MPI␣implementation␣does␣not␣support␣MPI_THREAD_FUNNELED" << std::endl; \n
>  \n
> &nbsp;&nbsp;&nbsp;&nbsp; { \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    // define the same CSR matrix as for StrumpackSparseSolver \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int N=...; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // construct an NxN CSR matrix with nnz nonzeros \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int* row_ptr = ...; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // N+1 integers \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int* col_ind = ...; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // nnz integers \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double* val = ...; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;// nnz scalars \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // allocate entire solution and right-hand side vectors on each MPI process \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double* x = new double[N]; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// will hold the solution vector \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double* b = ...; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; // set a right-hand side b \n
>  \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // construct solver and specify the MPI communicator \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StrumpackSparseSolverMPI<double> sp(MPI_COMM_WORLD);  \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sp.options().set_matching(MatchingJob::NONE);  \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sp.options().set_from_command_line(argc, argv);  \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sp.set_csr_matrix(N, row_ptr, col_ind, val); sp.solve(b, x); \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     ... // check residual/error, cleanup \n
> &nbsp;&nbsp;&nbsp;&nbsp;  } \n
> &nbsp;&nbsp;&nbsp;&nbsp;  Cblacs_exit(1); \n
> &nbsp;&nbsp;&nbsp;&nbsp;  MPI_Finalize(); \n
> }

The only difference here is the use of StrumpackSparseSolverMPI instead of StrumpackSparseSolver and the calls to MPI_Init_thread, Cblacs_exit and MPI_Finalize.

*/

/*! \page StrumpackSparseSolverMPIDist_Example StrumpackSparseSolverMPIDist Example

Finally, we illustrate the usage of StrumpackSparseSolverMPIDist<scalar,integer=int> solver. This interface takes a block-row distributed compressed sparse row matrix as input. This matrix format is illustrated in Figure 2.

> #include "StrumpackSparseSolverMPI.hpp" \n
> using namespace strumpack; \n
>  \n
> int main(int argc, char* argv[ ]) &nbsp;&nbsp;{ \n
> &nbsp;&nbsp;&nbsp;&nbsp; int thread_level, rank, P; \n
> &nbsp;&nbsp;&nbsp;&nbsp; MPI_Init_thread(&argc, &argv, MPI_THREAD_FUNNELED, &thread_level);  \n
> &nbsp;&nbsp;&nbsp;&nbsp; MPI_Comm_rank(MPI_COMM_WORLD, &rank);  \n
> &nbsp;&nbsp;&nbsp;&nbsp; MPI_Comm_size(MPI_COMM_WORLD, &P); \n
> &nbsp;&nbsp;&nbsp;&nbsp; { \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    // define a block-row distributed CSR matrix \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int* dist = new int[P]; \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// set dist such that processor p owns rows [dist[p], dist[p+1]) of the sparse matrix  \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int p=0; p<P; p++) dist[p] = .. ; \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // local_n is the number of rows of the input matrix assigned to me

<img src="/Users/lucyguo/Desktop/LBL1/STRUMPACK/doc/doxygen/images/SSSMPIDistEx.png" width = 100%>

Figure 2: Illustration of a small 5×5 sparse matrix with 11 nonzeros and its block-row distributed compressed sparse row representation. We always use 0-based indexing! Process P0 owns row 0, process P1 has rows 1 and 2 and process P2 has rows 3 and 4. This distribution of rows over the processes is represented by the dist array. Process p owns rows [dist[p],dist[p+1]). If N = 5 is the number of rows in the entire matrix and P is the total number of processes, then dist[P]=N. The (same) dist array is stored on every process. Each process holds a CSR representation of only its local rows of the matrix, see Figure 1.

> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  int local_n   = dist[rank+1] - dist[rank]; \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  int* row_ptr  = new int[local_n+1]; \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  .. // set the sparse matrix row pointers in row_ptr \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  int local_nnz = row_ptr[local_n+1] - row_ptr[0]; \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  int* col_ind  = new int[local_nnz]; \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  .. // set the sparse matrix column indices in col_ind \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  double* val   = new double[local_nnz]; \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  .. // set the matrix nonzero value in val \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  double* x = new double[local_n];  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; // local part of solution \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  double* b = new double[local_n]; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;  // local part of rhs \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  for (int i=0; i<local_n; i++) b[i] = ..;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // set the rhs \n
>  \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  StrumpackSparseSolverMPIDist<double> sp(MPI_COMM_WORLD);  \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  sp.options().set_reordering_method(ReorderingStrategy::PARMETIS);  \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  sp.options().set_from_command_line(argc, argv);  \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  sp.set_distributed_csr_matrix(local_n, row_ptr, col_ind, val, dist); \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  sp.solve(b, x); \n
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       ... // check residual/error, cleanup \n
> &nbsp;&nbsp;&nbsp;&nbsp;  } \n
> &nbsp;&nbsp;&nbsp;&nbsp;  Cblacs_exit(1); \n
> &nbsp;&nbsp;&nbsp;&nbsp;  MPI_Finalize(); \n
> }

*/

/*! \page Initializing_the_Solver_Object Initializing the Solver Object

Let

> typedef strumpack::StrumpackSparseSolver<scalar,integer> Sp; \n
> typedef strumpack::StrumpackSparseSolverMPI<scalar,integer> SpMPI; \n
> typedef strumpack::StrumpackSparseSolverMPIDist<scalar,integer> SpMPIDist;
   
Each of the solver classes has two constructors:

> Sp::StrumpackSparseSolver(bool verbose=true, bool root=true); \n
> Sp::StrumpackSparseSolver(int argc, char* argv[], bool verbose=true, bool root=true); \n

> SpMPI::StrumpackSparseSolverMPIDist(MPI_Comm comm, bool verbose=true); \n
> SpMPI::StrumpackSparseSolverMPIDist(MPI_Comm comm, int argc, char* argv[], bool verbose=true); \n

> SpMPIDist::StrumpackSparseSolverMPIDist(MPI_Comm comm, bool verbose=true); \n
> SpMPIDist::StrumpackSparseSolverMPIDist(MPI_Comm comm, int argc, char* argv[], bool verbose=true); \n
 
where argc and argv contain the command line options and the verbose option can be set to false to suppress output of the solver. Note that since SpMPIDist is a subclass of SpMPI, which is a subclass of Sp, all public members of Sp are also members of SpMPI and SpMPIDist. The public interface to the SpMPI class is exactly the same as that for the Sp class.

*/

/*! \page Sparse_Matrix_Format Sparse Matrix Format

The sparse matrix should be specified in compressed sparse row format [8]:

> void Sp :: set_csr_matrix(int N, int* row_ptr, int* col_ind, scalar* values, bool symmetric_pattern=false);

Internally, the matrix is copied, so it will not be modified. Previous versions of STRUMPACK also supported the CSC format, but this is now deprecated. If the sparsity pattern of the matrix is symmetric (the values do not have to be symmetric), then you can set symmetric_pattern=true. This saves some work in the setup phase of the solver. \n
&nbsp;&nbsp;&nbsp;&nbsp;For the SpMPIDist solver the input is a block-row distributed compressed sparse row matrix (as illustrated in the example above):

> void SpMPIDist :: set_distributed_csr_matrix
>(integer local_rows, integer* row_ptr, integer* col_ind,
> scalar* values, integer* dist, bool symmetric_pattern=false);

Alternatively, you can also specify a sequential CSR matrix to the SpMPIDist solver:

> void SpMPIDist :: set_csr_matrix
> (integer N, integer* row_ptr, integer* col_ind,
> scalar* values, bool symmetric_pattern=false);

For this routine, the matrix only needs to be specified completely on the root process. Other processes can pass NULL for the arrays.

*/

/*! \page Setting_and_Parsing_Options Setting and Parsing Options

The solver class has an object of type SPOptions<scalar>, which can be accessed through:

> SPOptions<scalar>& Sp::options();

The SPOptions<scalar> class is defined in SPOptions.hpp. The complete public interface for the SPOptions<scalar> class is given in Section 4.10.1. The following subsections describe some of the options available from SPOptions<scalar> in more detail.

*/

/*! \page Reordering Reordering

There are three types of matrix reordering: for numerical stability, to reduce fill-in and to reduce the HSS- ranks. These reorderings are all performed when calling

> ReturnCode Sp :: reorder( );

The return value is of type ReturnCode (defined in strumpack_parameters.hpp) and can be

> enum class ReturnCode { \n
> &nbsp;&nbsp;&nbsp;&nbsp; SUCCESS, &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;/*!< Operation completed successfully. * /  \n
> &nbsp;&nbsp;&nbsp;&nbsp; MATRIX_NOT_SET, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*!< The input matrix was not set. * /  \n
> &nbsp;&nbsp;&nbsp;&nbsp; REORDERING_ERROR &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp; /*!< The matrix reordering failed. * / \n
> };

<hr>

- \subpage Reordering_for_Numerical_Stability
- \subpage Nested_Dissection_Recording

*/

/*! \page Reordering_for_Numerical_Stability Reordering for Numerical Stability

The reordering for numerical stability is performed using MC64 or Combinatorial BLAS. For many matrices, this reordering is not necessary and can safely be disabled! MC64 supports 5 different modes and there is one option to select the Combinatorial BLAS code:

> enum class MatchingJob {  \n
> &nbsp;&nbsp;&nbsp;&nbsp;  NONE, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; /*!< Don’t do anything * /   \n
> &nbsp;&nbsp;&nbsp;&nbsp;  MAX_CARDINALITY, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*!< Maximum cardinality * /   \n
> &nbsp;&nbsp;&nbsp;&nbsp;  MAX_SMALLEST_DIAGONAL, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; /*!< Maximum smallest diagonal value * /   \n
>  &nbsp;&nbsp;&nbsp;&nbsp; MAX_SMALLEST_DIAGONAL_2, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*!< Same as MAX_SMALLEST_DIAGONAL, different algorithm * /   
> &nbsp;&nbsp;&nbsp;&nbsp;  MAX_DIAGONAL_SUM, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /*!< Maximum sum of diagonal values * /   \n
> &nbsp;&nbsp;&nbsp;&nbsp;  MAX_DIAGONAL_PRODUCT_SCALING, &nbsp;&nbsp;&nbsp;&nbsp; /*!< Maximum product of diagonal values and row and column scaling * /   \n
> &nbsp;&nbsp;&nbsp;&nbsp;  COMBBLAS &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /*!< Use AWPM from Combinatorial BLAS * /  \n
> };

which can be selected via

> void SPOptions::set_matching(MatchingJob job); \n
> MatchingJob SPOptions::matching() const;

where matching() queries the currently selected strategy (the default is MAX_DIAGONAL_PRODUCT_SCALING maximum product of diagonal values plus row and column scaling). The command line option
>  \--sp_matching [0-6] \n
can also be used, where the integers are defined as:
- 0: no reordering for stability, this disables MC64/matching
- 1: MC64(1): currently not supported
- 2: MC64(2): maximize the smallest diagonal value
- 3: MC64(3): maximize the smallest diagonal value, different strategy
- 4: MC64(4): maximize sum of diagonal values
- 5: MC64(5): maximize product of diagonal values and apply row and column scaling 6: Combinatorial BLAS: approximate weight perfect matching

&nbsp;&nbsp;&nbsp;&nbsp;The MC64 code is sequential, so when using this option in parallel, the graph is first gathered to the root process. The Combinatorial BLAS code can currently only be used in parallel, and only with a square number of processes.

*/

/*! \page Nested_Dissection_Recording Nested Dissection Recording

The STRUMPACK sparse solver supports both (Par)Metis and (PT-)Scotch for the matrix reordering. The following functions can set the preferred method or check the currently selected method:

> void SPOptions::set_reordering_method(ReorderingStrategy m); \n
> ReorderingStrategy SPOptions::reordering_method() const;

The options for MatrixReorderingStrategy are
    
> enum class ReorderingStrategy { \n
> &nbsp;&nbsp;&nbsp;&nbsp; NATURAL, &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*!< Do not reorder the system * /  \n
> &nbsp;&nbsp;&nbsp;&nbsp; METIS, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*!< Use Metis nested-dissection reordering * /  \n
> &nbsp;&nbsp;&nbsp;&nbsp; PARMETIS, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*!< Use ParMetis nested-dissection reordering * /  \n
> &nbsp;&nbsp;&nbsp;&nbsp;  SCOTCH, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*!< Use Scotch nested-dissection reordering * /  \n
> &nbsp;&nbsp;&nbsp;&nbsp;  PTSCOTCH, &nbsp;&nbsp; &nbsp; &nbsp; /*!< Use PT-Scotch nested-dissection reordering * /  \n
> &nbsp;&nbsp;&nbsp;&nbsp;  RCM, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; /*!< Use RCM reordering * /  \n
> &nbsp;&nbsp;&nbsp;&nbsp;  GEOMETRIC &nbsp;&nbsp;&nbsp;&nbsp; /*!< A simple geometric nested dissection code that
>  only works for regular meshes. (see Sp::reorder)  * / \n
> };

When the solver is an object of Sp, PARMETIS or PTSCOTCH are not supported. When the solver is parallel, either an SpMPI or SpMPIDist object, and METIS, SCOTCH or RCM are chosen, then the graph of the complete matrix will be gathered onto the root process and the root process will call the (sequential) Metis, Scotch or RCM reordering routine. For large graphs this might fail due to insufficient memory.
&nbsp;&nbsp;&nbsp;&nbsp;The GEOMETRIC option is only allowed for regular grids. In this case, the dimensions of the grid should be specified in the function

> ReturnCode Sp::reorder(int nx=1, int ny=1, int nz=1);

For instance for a regular 2d 2000 × 4000 grid, you can call this as sp.reorder(2000, 4000). In the general algebraic case, the grid dimensions don’t have to be provided. The reordering method can also be specified via the command line option
> \--sp_reordering_method [metis|parmetis|scotch|ptscotch|geometric|rcm]

*/

/*! \page Factorization Factorization

Compute the factorization by calling
> ReturnCode Sp::factor();
where the possible return values are the same as for Sp::reorder(). If Sp::reorder() was not called already, it is called automatically. When HSS compression is not enabled, this will compute an exact LU factorization of the (permuted) sparse input matrix. If HSS compression is enabled (with SPOptions::enable_HSS() or \--sp_enable_HSS, see Section 5), the factorization is only approximate.

*/

/*! \page Solve Solve

Solve the linear system <i>Ax = b</i> by calling

> ReturnCode Sp::solve(scalar* b, scalar* x, bool use_initial_guess=false);

By default (bool use_initial_guess=false) the input in x is ignored. If bool use_initial_guess=true, x is used as initial guess for the iterative solver (if an iterative solver is used, for instance iterative refinement or GMRES). If the Sp::factor() was not called, it is called automatically. The return values are the same as for Sp::reorder().\n

&nbsp;&nbsp;&nbsp;&nbsp;The iterative solver can be chosen through:

>  void SPOptions::set_Krylov_solver(KrylovSolver s);

where KrylovSolver can take the following values:

> enum class KrylovSolver { \n
> &nbsp;&nbsp;&nbsp;&nbsp; AUTO, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*!< Use iterative refinement if no HSS compression is used, otherwise > PGMRES. * /  \n
> &nbsp;&nbsp;&nbsp;&nbsp; DIRECT, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*!< No outer iterative solver, just a single application of the  multifrontal solver. * /  \n
> &nbsp;&nbsp;&nbsp;&nbsp; REFINE, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*!< Iterative refinement. * /  \n
> &nbsp;&nbsp;&nbsp;&nbsp; PREC_GMRES, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; /*!< Preconditioned GMRES. The preconditioner is the (approx)  multifrontal solver. * /  \n
> &nbsp;&nbsp;&nbsp;&nbsp; GMRES, &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*!< UN-preconditioned GMRES. (for testing mainly) * /  \n
> &nbsp;&nbsp;&nbsp;&nbsp; PREC_BICGSTAB, &nbsp;&nbsp;&nbsp;&nbsp; /*!< Preconditioned BiCGStab. The preconditioner is the (approx) > multifrontal solver. * /  \n
> &nbsp;&nbsp;&nbsp;&nbsp; BICGSTAB &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*!< UN-preconditioned BiCGStab. (for testing mainly) * / \n
> };

with KrylovSolver::AUTO being the default value. The KrylovSolver::AUTO setting will use iterative refinement when HSS compression is not enabled, and preconditioned GMRES when HSS compression is enabled, see Section 5. To use the solver as a preconditioner, or a single (approximate) solve, set the solver to KrylovSolver::DIRECT. When calling SpMPIDist::solve, the right-hand side and solution vectors should only point to the local parts!

*/

/*! \page All_Options_for_the_Sparse_Solver All Options for the Sparse Solver

The HSS specific options are stored in an object of type HSSOptions<scalar>, inside the SPOptions object. These options are described in Section 5.

<hr>

- \subpage SPOptions_Scalar_Interface
- \subpage Command_Line_Options

*/

/*! \page SPOptions_Scalar_Interface SPOptions<scalar> Interface

The complete public interface to the options class is as follows, wher the real type is the real part of a scalar,
i.e., decltype(std::real(scalar(0))).

>   template<typename scalar> class SPOptions { \n
>   public: \n
>  &nbsp;&nbsp;&nbsp;&nbsp;   SPOptions(); \n
>  &nbsp;&nbsp;&nbsp;&nbsp;   SPOptions(int argc, char* argv[]); \n
>  \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* print statistics? * / \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void set_verbose(bool verbose);   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool verbose() const; \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* maximum iterations in iterative solver * / \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void set_maxit(int maxit); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int maxit() const; \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* relative residual stopping criterion for iterative solver * / \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void set_rel_tol(real rel_tol); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; real rel_tol() const;  \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* absolute residual stopping criterion for iterative solver * / \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void set_abs_tol(real abs_tol);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; real abs_tol() const; \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* type of iterative solver to use, see section 4.9 * / \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void set_Krylov_solver(KrylovSolver s);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; KrylovSolver Krylov_solver() const; \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* GMRES restart * / \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void set_gmres_restart(int m); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int gmres_restart() const; \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* type of Gram-Schmidt used in GMRES * / \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void set_GramSchmidt_type(GramSchmidtType t); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GramSchmidtType GramSchmidt_type() const; \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* nested-dissection code, see section 4.7.2 * / \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void set_reordering_method(ReorderingStrategy m);  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ReorderingStrategy reordering_method() const; \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* stop nested-dissection when domains are smaller than nd_param * / \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void set_nd_param(int nd_param); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int nd_param() const; \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* use the internal (undocumented) metis routine METIS_NodeNDP * / \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void enable_METIS_NodeNDP(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool use_METIS_NodeNDP() const;  \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* do not use METIS_NodeNDP, use METIS_NodeND instead * / \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void disable_METIS_NodeNDP(); \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* use METIS_NodeND instead of METIS_NodeDNP * / \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void enable_METIS_NodeND();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool use_METIS_NodeND() const; \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* do not use METIS_NodeND, use METIS_NodeNDP instead * / \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void disable_METIS_NodeND(); \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* build the supernodal tree using the MUMPS_SYMQAMD code * / \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void enable_MUMPS_SYMQAMD();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool use_MUMPS_SYMQAMD() const; \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* do not use MUMPS_SYMQAMD, use fundamental supernodes * / \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void disable_MUMPS_SYMQAMD(); \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* when using MUMPS_SYMQAMS, enable aggressive amalgamation * / \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void enable_agg_amalg();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; bool use_agg_amalg() const;  \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* when using MUMPS_SYMQAMS, disable aggressive amalgamation * / \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void disable_agg_amalg(); \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* set the job to be used for static pivoting, see section 4.7.1 * / \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void set_matching(MatchingJob job);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MatchingJob matching() const; \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* not used at the moment * / \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void enable_assembly_tree_log();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool log_assembly_tree() const; \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void disable_assembly_tree_log();
> \n \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* enable HSS compression, see section 5 * /  \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void enable_HSS();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool use_HSS() const; \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* disable HSS compression * / \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void disable_HSS(); \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* set the minimum size of a separator for HSS compression * / \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void set_HSS_min_sep_size(int s);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int HSS_min_sep_size() const;
> \n   \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* set level to 1 to enable length 2 connections in the separator  
> &nbsp;&nbsp;&nbsp;&nbsp;    * before computing separator reordering to reduce HSS ranks. \n 
> &nbsp;&nbsp;&nbsp;&nbsp;    * Set to to disable length 2 connections. * / \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void set_separator_ordering_level(int l);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; int separator_ordering_level() const;
> \n\n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* best not to touch this * /  \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void enable_indirect_sampling(); \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void disable_indirect_sampling();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; bool indirect_sampling() const;
> \n \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void enable_replace_tiny_pivots(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;  bool replace_tiny_pivots() const; \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void disable_replace_tiny_pivots(;
> \n\n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* get the HSS specific options, see section 5. * / \n
> &nbsp;&nbsp;&nbsp;&nbsp;    const HSS::HSSOptions<scalar>& HSS_options() const; \n
> &nbsp;&nbsp;&nbsp;&nbsp;    HSS::HSSOptions<scalar>& HSS_options();
> \n\n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* parse the options in argc/argv set in the constructor * / \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void set_from_command_line(); \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* parse the options in argc/argv * /  \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void set_from_command_line(int argc, char* argv[]); \n
> &nbsp;&nbsp;&nbsp;&nbsp;    /* print out message listing all command line options * /  \n
> &nbsp;&nbsp;&nbsp;&nbsp;    void describe_options() const; \n
> };

This uses the following (scoped) enumeration for the Gram-Schmidt type used in GMRES:

> enum class GramSchmidtType { \n
> &nbsp;&nbsp;&nbsp;&nbsp; CLASSICAL, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*!< Classical Gram-Schmidt is faster, more scalable. * / \n
> &nbsp;&nbsp;&nbsp;&nbsp; MODIFIED &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*!< Modified Gram-Schmidt is slower, but stable. * / \n
> };

<img src="/Users/lucyguo/Desktop/LBL1/STRUMPACK/doc/doxygen/images/SPOptions_Interface.png" width = 25%>

Figure 3: Illustration of a Hierarchically Semi-Separable (HSS) matrix. Gray blocks are dense matrices. Off- diagonal blocks, on different levels of the HSS hierarchy, are low-rank. The low-rank factors of off-diagonal blocks of different levels are related.

*/

/*! \page Command_Line_Options Command Line Options

To get a list of all available options, make sure to pass “int argc, char* argv[]” when initializing the StrumpackSparseSolver or when calling SPOptions::set_from_command_line and run the application with --<b>help</b> or -h. Some default values listed here are for double precision and might be different when running in single precision. \n\n

STRUMPACK options:
> \--sp_maxit int (default 5000) \n
> \--sp_rel_tol real (default 1e-06) \n
> \--sp_abs_tol real (default 1e-10) \n
> \--sp_Krylov_solver auto|direct|refinement|pgmres|gmres|pbicgstab|bicgstab --sp_gmres_restart int (default 30) \n
> \--sp_GramSchmidt_type modified|classical \n
> \--sp_reordering_method natural|metis|scotch|parmetis|ptscotch|rcm|geometric --sp_nd_param int (default 8) \n
> \--sp_enable_METIS_NodeNDP (default <b>true</b>) \n
> \--sp_disable_METIS_NodeNDP (default <b>false</b>) \n
> \--sp_enable_METIS_NodeND (default <b>false</b>) \n
> \--sp_disable_METIS_NodeND (default <b>true</b>) \n
> \--sp_enable_MUMPS_SYMQAMD (default <b>false</b>) \n
> \--sp_disable_MUMPS_SYMQAMD (default <b>true</b>) \n
> \--sp_enable_agg_amalg (default <b>false</b>) \n
> \--sp_disable_agg_amalg (default <b>true</b>) \n
> \--sp_matching 0-6 (default 5) \n
> \--sp_enable_hss (default <b>false</b>) \n
> \--sp_disable_hss (default <b>true</b>) \n
> \--sp_hss_min_sep_size int (default 256) \n
> \--sp_separator_ordering_level (default 1) \n
> \--sp_enable_indirect_sampling \n
> \--sp_disable_indirect_sampling \n
> \--sp_enable_replace_tiny_pivots \n
> \--sp_disable_replace_tiny_pivots \n
> \--sp_verbose or -v (default <b>true</b>) \n
> \--sp_quiet or -q (default <b>false</b>) \n
> \--help or -h

*/
*/


